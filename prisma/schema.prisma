// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  role          UserRole        @default(USER)
  credits       Int             @default(0)
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  payments      Payment[]
  projects      Project[]        // Added projects relation
  charts        ChartInstance[]  // Modified to allow multiple charts

  @@index([email])
  @@index([role])
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// New Project model
model Project {
  id          String          @id @default(cuid())
  name        String
  description String?
  apiKey      String?         @unique
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  charts      ChartInstance[]

  @@index([userId])
}

model ChartInstance {
  id          String    @id @default(cuid())
  content     String    @db.Text
  name        String    @default("New Chart")
  color       String    @default("#80B500")
  onePageMode Boolean   @default(false)
  isPublished Boolean   @default(false)
  version     Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([isPublished])
}

model Payment {
  id              String         @id @default(cuid())
  amount          Float
  currency        String         @default("EUR")
  status          PaymentStatus  @default(PENDING)
  stripeSessionId String         @unique
  creditAmount    Int            @default(0)
  metadata        Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  userId          String
  user            User           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}