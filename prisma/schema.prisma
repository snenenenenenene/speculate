// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  role          UserRole  @default(USER)
  credits       Int       @default(0)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  flows         Flow[]
  payments      Payment[]

  @@index([email])
  @@index([role])
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String     @id @default(cuid())
  name        String
  description String?
  color       String     @default("#3B82F6")
  apiEnabled  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  flow        Flow?      @relation("ProjectFlow")
  apiUsage    APIUsage[]

  @@index([userId])
}

model Flow {
  id             String          @id @default(cuid())
  name           String
  description    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  projectId      String          @unique
  project        Project         @relation("ProjectFlow", fields: [projectId], references: [id], onDelete: Cascade)
  userId         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  chartInstances ChartInstance[]

  @@index([userId])
}

model ChartInstance {
  id                String   @id @default(cuid())
  name              String
  nodes             Json     @default("[]")
  edges             Json     @default("[]")
  color             String   @default("#3B82F6")
  onePageMode       Boolean  @default(false)
  publishedVersions Json     @default("[]")
  variables         Json     @default("[]")
  flowId            String
  flow              Flow     @relation(fields: [flowId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([flowId])
}

model APIUsage {
  id         String   @id @default(cuid())
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  endpoint   String
  statusCode Int
  duration   Int
  createdAt  DateTime @default(now())

  @@index([projectId])
  @@index([createdAt])
}

model Payment {
  id        String        @id @default(cuid())
  amount    Int
  currency  String       @default("USD")
  status    PaymentStatus @default(PENDING)
  createdAt DateTime     @default(now())
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
