generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  role          UserRole        @default(USER)
  credits       Int             @default(0)
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  
  accounts      Account[]
  sessions      Session[]
  projects      Project[]       // Owner of projects
  collaborations ProjectCollaborator[] // Projects user collaborates on
  charts        ChartInstance[]
  payments      Payment[]
  auditLogs     AuditLog[]     // Actions performed by user
  versions      Version[]       // Versions created by user
  invitations   ProjectInvitation[] // Invitations received
  shareAccess   ProjectShareAccess[] // Access to shared projects
  sharedProjects ProjectShare[] // Projects shared by user
  questionnaireResponses QuestionnaireResponse[]

  @@index([email])
  @@index([role])
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String          @id @default(cuid())
  name        String
  description String?
  apiKey      String?         @unique
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  variables   Json[]          @default([])
  shareSettings Json?         // ProjectShareSettings
  isPublic    Boolean         @default(false)
  mainStartFlowId String?     // ID of the main start flow
  
  userId      String          // Owner
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  charts      ChartInstance[]
  collaborators ProjectCollaborator[]
  invitations ProjectInvitation[]
  auditLogs   AuditLog[]
  domains     AllowedDomain[]
  shares      ProjectShare[]  // Active shares of this project

  @@index([userId])
  @@index([mainStartFlowId])
}

model ProjectShare {
  id          String    @id @default(cuid())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy   String
  user        User      @relation(fields: [createdBy], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  expiresAt   DateTime?
  settings    Json      // ShareSettings object
  shareId     String    @unique  // Public-facing ID for share URLs
  password    String?   // Hashed password if protected
  views       Int       @default(0)
  lastViewed  DateTime?
  
  // Access tracking
  accessLogs  ProjectShareAccess[]
  
  @@index([projectId])
  @@index([createdBy])
  @@index([shareId])
  @@index([expiresAt])
}

model ProjectShareAccess {
  id          String       @id @default(cuid())
  shareId     String
  share       ProjectShare @relation(fields: [shareId], references: [id], onDelete: Cascade)
  userId      String?      // Null for anonymous access
  user        User?        @relation(fields: [userId], references: [id])
  accessedAt  DateTime     @default(now())
  ipAddress   String?
  userAgent   String?
  accessLevel ShareAccessLevel

  @@index([shareId])
  @@index([userId])
  @@index([accessedAt])
}

enum ShareAccessLevel {
  VIEW
  COMMENT
  EDIT
}

model ProjectCollaborator {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(VIEWER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

enum ProjectRole {
  OWNER    // Full access + billing
  ADMIN    // Full access
  EDITOR   // Can edit flows
  VIEWER   // Read-only access
}

model ProjectInvitation {
  id        String      @id @default(cuid())
  email     String
  projectId String
  role      ProjectRole @default(VIEWER)
  token     String      @unique
  expires   DateTime
  accepted  Boolean     @default(false)
  createdAt DateTime    @default(now())
  
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?     // Null until accepted

  @@index([projectId])
  @@index([email])
}

model AllowedDomain {
  id        String   @id @default(cuid())
  domain    String
  projectId String
  createdAt DateTime @default(now())
  
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, domain])
  @@index([projectId])
}

model ChartInstance {
  id             String    @id @default(cuid())
  content        String    @db.Text
  name           String    @default("New Chart")
  color          String    @default("#80B500")
  onePageMode    Boolean   @default(false)
  isPublished    Boolean   @default(false)
  version        Int       @default(1)
  variables      Json[]    @default([])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  publishedAt    DateTime?
  
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  
  projectId      String
  project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  versions       Version[] // Version history
  activeVersion  Version?  @relation("ActiveVersion", fields: [activeVersionId], references: [id])
  activeVersionId String?
  responses   QuestionnaireResponse[]
  analytics   QuestionnaireAnalytics[]

  @@index([userId])
  @@index([projectId])
  @@index([isPublished])
  @@index([activeVersionId])
}

model Version {
  id          String    @id @default(cuid())
  version     Int
  name        String?   // Version name/tag
  content     Json      // Flow state at this version
  metadata    Json      // Changelog, notes, etc
  createdAt   DateTime  @default(now())
  publishedAt DateTime?
  
  flowId      String
  flow        ChartInstance @relation(fields: [flowId], references: [id], onDelete: Cascade)
  
  createdBy   String
  user        User      @relation(fields: [createdBy], references: [id])

  activeOn    ChartInstance[] @relation("ActiveVersion") // Flows where this version is active

  @@unique([flowId, version])
  @@index([flowId])
  @@index([createdBy])
}

model AuditLog {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  action      AuditAction
  entityType  String      // "project", "flow", "collaborator", etc.
  entityId    String      // ID of the affected entity
  userId      String      // Who made the change
  projectId   String      // Associated project
  metadata    Json        // Additional context
  snapshot    Json?       // State before/after
  ipAddress   String?     // IP address of request
  userAgent   String?     // Browser/client info
  
  user        User        @relation(fields: [userId], references: [id])
  project     Project     @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

enum AuditAction {
  CREATED
  UPDATED
  DELETED
  PUBLISHED
  UNPUBLISHED
  ROLE_CHANGED
  COLLABORATOR_ADDED
  COLLABORATOR_REMOVED
  VARIABLE_ADDED
  VARIABLE_UPDATED
  VARIABLE_REMOVED
  API_KEY_GENERATED
  API_KEY_REVOKED
  VERSION_CREATED
  INVITATION_SENT
  INVITATION_ACCEPTED
  INVITATION_REJECTED
  SHARE_CREATED
  SHARE_UPDATED
  SHARE_DELETED
  SHARE_ACCESSED
  FLOW_NODE_ADDED
  FLOW_NODE_REMOVED
  FLOW_NODE_UPDATED
  FLOW_EDGE_ADDED
  FLOW_EDGE_REMOVED
  FLOW_SETTINGS_UPDATED
  FLOW_VARIABLE_ADDED
  FLOW_VARIABLE_UPDATED
  FLOW_VARIABLE_REMOVED
}

model Payment {
  id            String        @id @default(cuid())
  amount        Int
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  stripeSessionId String?     @unique
  creditAmount  Int?
  
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model QuestionnaireResponse {
  id          String    @id @default(cuid())
  flowId      String    // Reference to ChartInstance
  flow        ChartInstance @relation(fields: [flowId], references: [id], onDelete: Cascade)
  version     Int       // Flow version when response was submitted
  userId      String?   // Optional: for authenticated users
  user        User?     @relation(fields: [userId], references: [id])
  sessionId   String    // For anonymous users
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  responses   Json      // Store all responses {nodeId: {optionIds: [], timestamp}}
  path        Json      // Store the path taken through the flow
  weights     Json      // Store calculated weights/scores
  metadata    Json?     // Additional data (browser, device, etc.)
  
  @@index([flowId])
  @@index([userId])
  @@index([sessionId])
  @@index([startedAt])
  @@index([completedAt])
}

model QuestionnaireAnalytics {
  id          String    @id @default(cuid())
  flowId      String    // Reference to ChartInstance
  flow        ChartInstance @relation(fields: [flowId], references: [id], onDelete: Cascade)
  version     Int       // Flow version this analytics is for
  totalResponses Int    @default(0)
  completionRate Float  @default(0)
  averageTime  Int     // In seconds
  nodeStats    Json    // Stats per node {nodeId: {views, selections, dropouts}}
  pathStats    Json    // Popular paths {path: count}
  weightStats  Json    // Weight distribution {range: count}
  updatedAt    DateTime @updatedAt

  @@unique([flowId, version])
  @@index([flowId])
}